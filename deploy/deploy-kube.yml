- hosts: "{{ env }}"
  # Uncomment `become: yes` if root privileges are required
  # become: yes
  tasks:
    - name: Check and delete the existing canary deployment
      shell: |
        if kubectl get deployment train-schedule-deployment-canary &>/dev/null; then
          echo "Deleting previous canary deployment"
          kubectl delete deployment train-schedule-deployment-canary
        else
          echo "No previous canary deployment found"
        fi
      args:
        warn: false

    - name: Check and delete the existing main deployment
      shell: |
        if kubectl get deployment | awk '{print $1}' | grep -q "train-schedule-deployment"; then
          echo "Deleting previous main deployment"
          kubectl delete deployment train-schedule-deployment
        fi
      args:
        warn: false

    - name: Deploy new application configurations (Canary)
      shell: |
        echo "Creating new canary deployment and service"
        kubectl apply -f - <<'EOF'
        kind: Service
        apiVersion: v1
        metadata:
          name: train-schedule-service-canary
        spec:
          type: NodePort
          selector:
            app: train-schedule
            track: canary
          ports:
          - protocol: TCP
            port: 8080
            nodePort: 8081

        ---

        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: train-schedule-deployment-canary
          labels:
            app: train-schedule
        spec:
          replicas: \$CANARY_REPLICAS
          selector:
            matchLabels:
              app: train-schedule
              track: canary
          template:
            metadata:
              labels:
                app: train-schedule
                track: canary
            spec:
              containers:
              - name: train-schedule
                image: \$DOCKER_IMAGE_NAME:\$BUILD_NUMBER
                ports:
                - containerPort: 8080
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 1
                  periodSeconds: 10
                resources:
                  requests:
                    cpu: 200m
        EOF
      args:
        warn: false

    - name: Deploy new application configurations (Stable)
      shell: |
        echo "Creating new stable deployment and service"
        kubectl apply -f - <<'EOF'
        kind: Service
        apiVersion: v1
        metadata:
          name: train-schedule-service
        spec:
          type: NodePort
          selector:
            app: train-schedule
          ports:
          - protocol: TCP
            port: 8080
            nodePort: 8080

        ---

        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: train-schedule-deployment
          labels:
            app: train-schedule
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: train-schedule
              track: stable
          template:
            metadata:
              labels:
                app: train-schedule
                track: stable
            spec:
              containers:
              - name: train-schedule
                image: \$DOCKER_IMAGE_NAME:\$BUILD_NUMBER
                ports:
                - containerPort: 8080
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 1
                  periodSeconds: 10
                resources:
                  requests:
                    cpu: 200m
        EOF
      args:
        warn: false

    - name: Check if canary service exists and apply
      shell: |
        if kubectl get svc | awk '{print $1}' | grep -q "train-schedule-service-canary"; then
          echo "Canary service exists, no action taken"
        else
          echo "Creating canary service"
          kubectl apply -f train-schedule-service-canary.yml
        fi
      args:
        warn: false
