---
- hosts: "{{ env }}"
  # Uncomment `become: yes` if root privileges are required
  # become: yes
  tasks:
    - name: Check and delete the existing canary deployment
      shell: |
        if kubectl get deployment train-schedule-deployment-canary &>/dev/null; then
          echo "Deleting previous canary deployment"
          kubectl delete deployment train-schedule-deployment-canary
        else
          echo "No previous canary deployment found"
        fi
      args:
        warn: false
        executable: /bin/bash

    - name: Check and delete the existing main deployment
      shell: |
        if kubectl get deployment | awk '{print $1}' | grep -q "train-schedule-deployment"; then
          echo "Deleting previous main deployment"
          kubectl delete deployment train-schedule-deployment
        fi
      args:
        warn: false

    - name: Create and deploy canary YAML file
      copy:
        content: |
          kind: Service
          apiVersion: v1
          metadata:
            name: train-schedule-service-canary
          spec:
            type: NodePort
            selector:
              app: train-schedule
              track: canary
            ports:
              - protocol: TCP
                port: 8080
                nodePort: 30001  # Update to a valid port range
        dest: /tmp/train-schedule-service-canary.yml

    - name: Apply canary service
      shell: kubectl apply -f /tmp/train-schedule-service-canary.yml

    - name: Create and deploy canary deployment YAML file
      copy:
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: train-schedule-deployment-canary
            labels:
              app: train-schedule
          spec:
            replicas: 2  # Replace this with the actual value of CANARY_REPLICAS if needed
            selector:
              matchLabels:
                app: train-schedule
                track: canary
            template:
              metadata:
                labels:
                  app: train-schedule
                  track: canary
              spec:
                containers:
                  - name: train-schedule
                    image: \$DOCKER_IMAGE_NAME:\$BUILD_NUMBER
                    ports:
                      - containerPort: 8080
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 8080
                      initialDelaySeconds: 15
                      timeoutSeconds: 1
                      periodSeconds: 10
                    resources:
                      requests:
                        cpu: 200m
        dest: /tmp/train-schedule-deployment-canary.yml

    - name: Apply canary deployment
      shell: kubectl apply -f /tmp/train-schedule-deployment-canary.yml

    - name: Create and deploy stable YAML file
      copy:
        content: |
          kind: Service
          apiVersion: v1
          metadata:
            name: train-schedule-service
          spec:
            type: NodePort
            selector:
              app: train-schedule
            ports:
              - protocol: TCP
                port: 8080
                nodePort: 30002
        dest: /tmp/train-schedule-service.yml

    - name: Apply stable service
      shell: kubectl apply -f /tmp/train-schedule-service.yml

    - name: Create and deploy stable deployment YAML file
      copy:
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: train-schedule-deployment
            labels:
              app: train-schedule
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: train-schedule
                track: stable
            template:
              metadata:
                labels:
                  app: train-schedule
                  track: stable
              spec:
                containers:
                  - name: train-schedule
                    image: \$DOCKER_IMAGE_NAME:\$BUILD_NUMBER
                    ports:
                      - containerPort: 8080
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 8080
                      initialDelaySeconds: 15
                      timeoutSeconds: 1
                      periodSeconds: 10
                    resources:
                      requests:
                        cpu: 200m
        dest: /tmp/train-schedule-deployment.yml

    - name: Apply stable deployment
      shell: kubectl apply -f /tmp/train-schedule-deployment.yml

    - name: Check if canary service exists and apply
      shell: |
        if kubectl get svc | awk '{print $1}' | grep -q "train-schedule-service-canary"; then
          echo "Canary service exists, no action taken"
        else
          echo "Creating canary service"
          kubectl apply -f train-schedule-service-canary.yml
        fi
      args:
        warn: false
