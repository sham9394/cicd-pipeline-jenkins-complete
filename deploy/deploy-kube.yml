---
- hosts: "{{ env }}"
  # Uncomment `become: yes` if root privileges are required
  # become: yes
  tasks:
    - name: Check and delete the existing canary deployment
      shell: |
        if kubectl get deployment train-schedule-deployment-canary &>/dev/null; then
          echo "Deleting previous canary deployment"
          kubectl delete deployment train-schedule-deployment-canary
        else
          echo "No previous canary deployment found"
        fi
      args:
        warn: false
        # This prevents failure if the command returns a non-zero exit code
        failed_when: false

    - name: Check and delete the existing main deployment
      shell: |
        if kubectl get deployment train-schedule-deployment &>/dev/null; then
          echo "Deleting previous main deployment"
          kubectl delete deployment train-schedule-deployment
        else
          echo "No previous main deployment found"
        fi
      args:
        warn: false
        # This prevents failure if the command returns a non-zero exit code
        failed_when: false

    - name: Deploy new application configurations (canary)
      shell: |
        echo "Creating new canary deployment"
        kubectl apply -f ${WORKSPCAE}train-schedule-kube-canary.yml
      args:
        warn: false

    - name: Deploy new application configurations (main)
      shell: |
        echo "Creating new main deployment"
        kubectl apply -f ${WORKSPCAE}train-schedule-kube.yml
      args:
        warn: false

    - name: Check and create application service (canary)
      shell: |
        if kubectl get svc train-schedule-service-canary &>/dev/null; then
          echo "Application service found, no actions taken"
        else
          echo "Creating application service"
          # Uncomment the following line if you want to create the service
          # kubectl apply -f train-schedule-service-canary.yml
        fi
      args:
        warn: false

    # Example commented-out tasks for reference
    # - name: Deploy application
    #   shell: kubectl create deployment sampleapp --image=lerndevops/samplejavaapp:{{ build }}
    #
    # - name: Expose application service
    #   shell: kubectl expose deployment sampleapp --name sampleapp --type NodePort --port 80 --target-port 8080
